## KEY INSTRUCTIONS

- This webapp is running on Springboot to test Redis server hosted remotely.
- Update the application.yaml to include the Redis IP server
- The value of the password was generated by using echo "redispassword" | sha235sum

If we want to test the wbapp locally, please do the following, since this 'v1-webappo1-springboot-remote' will not work locally, due to the configuration settings for using a remote Redis server
	- navigate into the 'original-webapp01-springboot-localhost' folder
	- open IDE, you can use command: "code ." to open VSC code
	- run the code by going into 'SpringSecurityLdapApplication.java' and hit 'Run'


## NAVIGATE IN 'v1-webapp1-springboot-remote'FOLDER
To buiild JAR file, run the following:
	- mvn clean
	- mvn compile package
	- java -jar ./target/spring-security-ldap-0.0.1-SNAPSHOT.jar 

# Deploy JAR to the remote webapp server.
Pre-requisites: Ensure the test webapp server has JDK17 installed.

	# To install OpenJDK17, apply the following steps:
		- wget https://download.oracle.com/java/17/archive/jdk-17.0.10_linux-x64_bin.tar.gz
		- tar xzvf jdk-17.0.10_linux-x64_bin.tar.gz
		- which java
		- vim ~/.bashrc

			# Set JAVA_HOME to point to your JDK installation directory
			export JAVA_HOME=/path/to/your/jdk-directory

			# Update the PATH environment variable
			export PATH=$JAVA_HOME/bin:$PATH

		- run the command: source ~/.bashrc

# Create a folder called 'webapp-working-with-redis' and run: java -jar spring-security-ldap-0.0.1-SNAPSHOT.jar
# Make sure the Redis server hosted remotely (on a different server to the one where this webapp is running) is configured, with the correct password, bind IP, up and running.
# Go to browser: http://<server_IP_address>:8080/login

## TROUBLESHOTING
- Port 8080 open for connections
- Port 6379 open for connections
- lsof -i -n -P | grep LISTEN if port 8080 already been assigned to another process on the server side
